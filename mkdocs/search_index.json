{
    "docs": [
        {
            "location": "/", 
            "text": "Please note that GAZE is currently under active alpha development and as such is \nlikely to be in a broken state\n.\n\n\n\n\n\n\n \n \n \n \n \n\n\nWhat's GAZE?\n\n\nIt's a true turnkey open-source media center solution. It will deploy, configure and network the following services, making use of Docker's ecosystem:\n\n\n\n\nSonarr\n, to manage TV series downloads.\n\n\nRadarr\n, to manage movie downloads.\n\n\nJackett\n, to manage torrent trackers.\n\n\nTransmission\n, a torrent client.\n\n\nPlex\n, to encode and stream media to devices.\n\n\nOmbi\n, a unified web-UI for managing Sonarr/Radarr/Plex/etc.\n\n\n\n\nAdditionally, to aggregate all of the above in to a single user-friendly service, we also provide:\n\n\n\n\nGAZE Proxy\n, a proxy service and web-UI to provide easy access to all of the above.\n\n\nGAZE Monitor\n, a Grafana dashboard to display service metrics and alerts.\n\n\nGAZE Control\n, a command-line tool to manage the full stack.\n\n\n\n\nInstallation\n\n\nAlthough GAZE should run on any system with Docker, we test builds on \nUbuntu 16.04 LTS and later\n so suggest it as a known good configuration.\n\n\nTo install the \ngaze\n command-line tool and deploy the full media center stack, simply paste the following command into a shell. On completion, you will be presented with all the details you need to access your services:\n\n\ncurl -L https://raw.githubusercontent.com/monokal/GAZE/master/gaze-control/gazectl-wrapper.sh \n /usr/local/bin/gaze \n chmod +x /usr/local/bin/gaze \n gaze bootstrap\n\n\n\n\nIf you get a \nPermission denied\n error, try \nsudo -i\n then the above command again.\n\n\nThat's it!\n\n\nUsage\n\n\nTo make life easy, the \ngaze\n command-line tool can be used to manage the full stack of media center services. Usage can be seen using the following command:\n\n\ngaze --help\n\n\n\n\nFurther documentation on GAZE Control can be \nfound here\n.\n\n\nDocumentation\n\n\nFull documentation on the GAZE project is \navailable here\n.\n\n\nSupport\n\n\nIf you experience any problems, would like to request a new feature or just chat, there are a couple of support channels available:\n\n\n\n\nGitter Chat\n\n\nGitHub Issues\n\n\n\n\nDevelopment\n\n\nIf you'd like to contribute to the GAZE project, please read the \ndevelopment documentation\n.\n\n\nLegal\n\n\nGAZE is released under the \nGNU General Public License v3.0\n.\nMaintainers of the GAZE project do not advocate the illegal sharing of media in any way, and assume no responsibility for improper use of GAZE or any linked software packages.\nBy using GAZE, you agree that you will not share or take any action using GAZE that infringes or violates someone else's rights or otherwise violates the law.\n\n\n\n\nThis \nREADME.md\n is overwritten by \ndocs/index.md\n during the build process, so edit that instead.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/#whats-gaze", 
            "text": "It's a true turnkey open-source media center solution. It will deploy, configure and network the following services, making use of Docker's ecosystem:   Sonarr , to manage TV series downloads.  Radarr , to manage movie downloads.  Jackett , to manage torrent trackers.  Transmission , a torrent client.  Plex , to encode and stream media to devices.  Ombi , a unified web-UI for managing Sonarr/Radarr/Plex/etc.   Additionally, to aggregate all of the above in to a single user-friendly service, we also provide:   GAZE Proxy , a proxy service and web-UI to provide easy access to all of the above.  GAZE Monitor , a Grafana dashboard to display service metrics and alerts.  GAZE Control , a command-line tool to manage the full stack.", 
            "title": "What's GAZE?"
        }, 
        {
            "location": "/#installation", 
            "text": "Although GAZE should run on any system with Docker, we test builds on  Ubuntu 16.04 LTS and later  so suggest it as a known good configuration.  To install the  gaze  command-line tool and deploy the full media center stack, simply paste the following command into a shell. On completion, you will be presented with all the details you need to access your services:  curl -L https://raw.githubusercontent.com/monokal/GAZE/master/gaze-control/gazectl-wrapper.sh   /usr/local/bin/gaze   chmod +x /usr/local/bin/gaze   gaze bootstrap  If you get a  Permission denied  error, try  sudo -i  then the above command again.  That's it!", 
            "title": "Installation"
        }, 
        {
            "location": "/#usage", 
            "text": "To make life easy, the  gaze  command-line tool can be used to manage the full stack of media center services. Usage can be seen using the following command:  gaze --help  Further documentation on GAZE Control can be  found here .", 
            "title": "Usage"
        }, 
        {
            "location": "/#documentation", 
            "text": "Full documentation on the GAZE project is  available here .", 
            "title": "Documentation"
        }, 
        {
            "location": "/#support", 
            "text": "If you experience any problems, would like to request a new feature or just chat, there are a couple of support channels available:   Gitter Chat  GitHub Issues", 
            "title": "Support"
        }, 
        {
            "location": "/#development", 
            "text": "If you'd like to contribute to the GAZE project, please read the  development documentation .", 
            "title": "Development"
        }, 
        {
            "location": "/#legal", 
            "text": "GAZE is released under the  GNU General Public License v3.0 .\nMaintainers of the GAZE project do not advocate the illegal sharing of media in any way, and assume no responsibility for improper use of GAZE or any linked software packages.\nBy using GAZE, you agree that you will not share or take any action using GAZE that infringes or violates someone else's rights or otherwise violates the law.   This  README.md  is overwritten by  docs/index.md  during the build process, so edit that instead.", 
            "title": "Legal"
        }, 
        {
            "location": "/control/", 
            "text": "This documentation is currently incomplete, but feel free to contribute!\n\n\n\n\nTo make life easy, the \ngaze\n command-line tool can be used to manage the full stack of media center services. Usage can be seen using the following command:\n\n\ngaze --help\n\n\n\n\nThe \ngaze\n command-line tool also supports overriding various default runtime arguments using environment variables. Sane defaults have been chosen so you shouldn't need to, but if you do:\n\n\n\n\nGAZECTL_NAMESPACE\n - The Docker Namespace of the \ngazectl\n container (default: \nmonokal\n).\n\n\nGAZECTL_IMAGE\n - The Docker Image of the \ngazectl\n container (default: \ngazectl\n).\n\n\nGAZECTL_VERSION\n - The Docker Image Tag of the \ngazectl\n container (default: \nlatest\n).\n\n\nGAZECTL_SOCKET\n - The Docker socket of the host (default: \n/var/run/docker.sock\n).\n\n\nGAZECTL_VOLUMES\n - Path to the Docker Volumes mountpoint on the host (default: \n/var/lib/docker/volumes\n).\n\n\nGAZECTL_UPDATE\n - Ensure we're running the latest version of Gaze Control (default: \ntrue\n)", 
            "title": "GAZE Control"
        }, 
        {
            "location": "/monitor/", 
            "text": "This documentation is currently incomplete, but feel free to contribute!", 
            "title": "GAZE Monitor"
        }, 
        {
            "location": "/proxy/", 
            "text": "This documentation is currently incomplete, but feel free to contribute!", 
            "title": "GAZE Proxy"
        }, 
        {
            "location": "/development/", 
            "text": "This documentation is currently incomplete, but feel free to contribute!\n\n\n\n\nTools\n\n\ngbuild\n\n\nAt the root of this repository you'll find the \ngbuild.sh\n script. This wraps some useful functions for building and testing (currently primitively) GAZE code, Docker Images, documentation, etc.\n\n\nAs always, usage can be seen using the \n--help\n argument:\n\n\nusage: gbuild [-h] {build,test,push,all} ...\n\nGAZE build tool.\n\npositional arguments:\n  {build,test,push,all}\n    build               build the gazectl Docker Image and documentation\n    test                test gazectl functionality\n    push                push the gazectl Docker Image, documentation and code\n    all                 do all of the above in that order\n\noptional arguments:\n  -h, --help            show this help message and exit\n\n\n\n\nSteps\n\n\nThe development process currently goes something like this:\n\n\n\n\nFork this repository.\n\n\nMake your changes.\n\n\nUse the \ngbuild\n tool (see above) to \nbuild\n and \ntest\n your changes locally.\n\n\nOpen a \nPull Request\n.\n\n\nOur \nTravis CI pipeline\n will build and test everything.\n\n\nIf successful, your changes will be merged.\n\n\n\n\nSupport\n\n\nIf you'd like a hand with anything, there are a couple of support channels available:\n\n\n\n\nGitter Chat\n\n\nGitHub Issues", 
            "title": "Development"
        }, 
        {
            "location": "/development/#tools", 
            "text": "", 
            "title": "Tools"
        }, 
        {
            "location": "/development/#gbuild", 
            "text": "At the root of this repository you'll find the  gbuild.sh  script. This wraps some useful functions for building and testing (currently primitively) GAZE code, Docker Images, documentation, etc.  As always, usage can be seen using the  --help  argument:  usage: gbuild [-h] {build,test,push,all} ...\n\nGAZE build tool.\n\npositional arguments:\n  {build,test,push,all}\n    build               build the gazectl Docker Image and documentation\n    test                test gazectl functionality\n    push                push the gazectl Docker Image, documentation and code\n    all                 do all of the above in that order\n\noptional arguments:\n  -h, --help            show this help message and exit", 
            "title": "gbuild"
        }, 
        {
            "location": "/development/#steps", 
            "text": "The development process currently goes something like this:   Fork this repository.  Make your changes.  Use the  gbuild  tool (see above) to  build  and  test  your changes locally.  Open a  Pull Request .  Our  Travis CI pipeline  will build and test everything.  If successful, your changes will be merged.", 
            "title": "Steps"
        }, 
        {
            "location": "/development/#support", 
            "text": "If you'd like a hand with anything, there are a couple of support channels available:   Gitter Chat  GitHub Issues", 
            "title": "Support"
        }
    ]
}